{"version":3,"file":"static/js/958.108de428.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n  padding: 15px;\n`;\n\nexport const Input = styled.input`\n  width: 200px;\n  border-radius: 15px;\n  outline: none;\n  border: 1px solid green;\n  padding: 5px;\n  background-color: #ffffff;\n  box-shadow: 1px 2px 6px 0px rgba(65, 33, 83, 0.7);\n\n  @media screen and (max-width: 768px) {\n    width: 250px;\n  }\n\n  &:focus {\n    border-color: #dd00ff;\n  }\n`;\nexport const FormBtn = styled.button`\n  margin-top: 60px;\n  padding: 4px;\n  width: 30%;\n  height: 100%;\n  flex-shrink: 0;\n  border-radius: 15px;\n  background: #a656dc;\n  border: none;\n  &:hover {\n    color: #fff;\n    background-color: #a656dc;\n    box-shadow: 1px 2px 6px 0px rgba(65, 33, 83, 0.7);\n  }\n  box-shadow: 0 2px 4px rgba(65, 33, 83, 0.7);\n\n  @media screen and (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\nexport const ErrorMessage = styled.p`\n  color: red;\n  font-size: 12px;\n  border-radius: 25px;\n  padding: 2px 4px;\n  background-color: #fff;\n`;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport { StyledForm, Input, FormBtn, ErrorMessage } from './ContactForm.styled';\n\nimport { createUser } from '../../redux/auth/authOperation';\n\nexport const registrationSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Name is required'),\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup\n      .string()\n      .min(7, 'Password must be at least 7 characters long')\n      .required('Password is required'),\n  })\n  .required();\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { name: '', email: '', password: '' },\n    resolver: yupResolver(registrationSchema),\n  });\n\n  const onSubmit = ({ name, email, password }) => {\n    dispatch(createUser({ name, email, password }))\n      .unwrap()\n      .then(() => Notiflix.Notify.success('Account successfully created!'))\n      .catch(e =>\n        e === 'Request failed with status code 400'\n          ? Notiflix.Notify.failure(\n              'This user already exist! Use Log In button'\n            )\n          : Notiflix.Notify.failure('Something went wrong, try one nore time!')\n      );\n    reset();\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"name\">Name</label>\n        <Input {...register('name')} type=\"text\" id=\"name\" />\n        <ErrorMessage>{errors.name?.message}</ErrorMessage>\n        <label htmlFor=\"email\">Email</label>\n        <Input {...register('email')} type=\"email\" id=\"email\" />\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n        <label htmlFor=\"password\">Password</label>\n        <Input {...register('password')} type=\"password\" id=\"password\" />\n        <ErrorMessage>{errors.password?.message}</ErrorMessage>\n        <FormBtn type=\"submit\">Register</FormBtn>\n      </StyledForm>\n    </>\n  );\n}\n","import React from 'react';\nimport { RegisterForm } from '../components/ContactForm/RegisterForm';\n\nfunction Register() {\n  return (\n    <>\n      <h3>Create an account</h3>\n      <RegisterForm />\n    </>\n  );\n}\n\nexport default Register;\n"],"names":["StyledForm","styled","_templateObject","_taggedTemplateLiteral","Input","_templateObject2","FormBtn","_templateObject3","ErrorMessage","_templateObject4","registrationSchema","yup","shape","name","matches","required","email","password","min","RegisterForm","_errors$name","_errors$email","_errors$password","dispatch","useDispatch","_useForm","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","reset","_jsx","_Fragment","children","_jsxs","onSubmit","_ref","createUser","unwrap","then","Notiflix","catch","e","htmlFor","_objectSpread","type","id","message"],"sourceRoot":""}